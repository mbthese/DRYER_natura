dplyr::select(-CODE)
pcrs$code<- ifelse(grepl("^\\d+$", pcrs$A), pcrs$A, NA) #regular expression "^\\d+$" to match strings that contain only digits. The ^ and $ anchors ensure that the entire string is matched.  If the value matches the pattern, we assign it to the new column numeric_col, otherwise we assign NA.
pcrs$code <- ifelse(is.na(pcrs$code), pcrs$B, pcrs$code)
pcrs <- pcrs %>%
dplyr::select(-A, -B)
pcrs <- pcrs[!duplicated(pcrs$sample_id),]
rownames(pcrs) <- pcrs$sample_id
#write.table(pcrs, file= "E:/DRYER_natura_data/16S/pcrs.txt", sep ="\t")
#obifile
file_obitab <- read.delim2("E:/DRYER_natura_data/16S/DRYER_natura_R1R2_good_demultiplexed_derepl_basicfilt_cl_agg_06042023.tab")
#colnames(file_obitab)
colnames(file_obitab) <- gsub("sample.", "", colnames(file_obitab)) # remove the pattern 'sample.' from column names
#read
colnames(file_obitab)
read <- file_obitab %>% select(c(1,20:184))
read_t <- t(read[,-1])
read_t <- as.data.frame(read_t)
colnames(read_t) <- read$id
read_t[is.na(read_t)] <- 0 #Replace na values with 0 using is.na()
read_t <- as.matrix(read_t)
#motus
motus <- file_obitab[, c(1,3,19,205)] #take the sequence column
rownames(motus) <- motus$id
#does not work
assign <- read.csv("E:/DRYER_natura_data/16S/Assignation/assignation06042023_with_quality_score.csv", header = TRUE)
assign <- assign %>%
dplyr::select(-sequence,-ncbi) %>%
rename(id = cluster.acc)
assign_motus <- left_join( motus, assign, by = "id") #on perd certain motus, non assignÃ©s.#dim 7473 au lieu de 7634
View(assign_motus)
assign_motus<- assign_motus %>% separate(path, into = c('domain','phylum', 'class', 'order'), sep = ";", FALSE)
View(assign_motus)
assign_motus<- assign_motus %>% mutate(taxo_long = paste0(phylum,"_", class, "_", order))
assign_motus<- assign_motus %>% mutate(taxo_court = paste0(phylum,"_", class))
#with read.csv("E:/DRYER_natura_data/16S/Assignation/assignation06042023.csv", header = TRUE) #summary(assign_motus$base_pair) #mean 300, range (93-410)
A <- unique(assign_motus$silva) #to know how many unique OTU I have #1239
rownames(assign_motus) <- assign_motus$id
#dimensions are not the same, so investigate missing controls
read_t_essai <- as.data.frame(read_t)
setdiff(rownames(pcrs),rownames(read_t_essai))
#remove missing controls
pcrs <- pcrs %>% filter(sample_id != "DRYER_natura_NA_16S_control_PCR_21")
pcrs <- pcrs %>% filter(sample_id != "DRYER_natura_NA_16S_control_PCR_22")
pcrs <- pcrs %>% filter(sample_id != "DRYER_natura_NA_16S_control_extraction_5")
samples <- samples %>% filter(sample_id != "DRYER_natura_NA_16S_control_PCR_21")
samples <- samples %>% filter(sample_id != "DRYER_natura_NA_16S_control_PCR_22")
samples <- samples %>% filter(sample_id != "DRYER_natura_NA_16S_control_extraction_5")
#Metabarlist
MetabarList <- metabarlist_generator(reads = read_t , #165*7634 #not okay
motus = assign_motus, #7634*11 #ok
pcrs = pcrs,  #165*8 #ok
samples = samples) #165*11
# Compute the number of reads per pcr
MetabarList$pcrs$nb_reads <- rowSums(MetabarList$reads)
summary(MetabarList$pcrs$nb_reads) #il y en a que 1
sum(MetabarList$pcrs$nb_reads) #2,032,280 de reads; mean: 12317
Nbr_reads <- MetabarList$pcrs
#total number of reads
sum(Nbr_reads$nb_reads) #[1] 2032280
#number of reads for all samples, removing control
Nbr_samples <-Nbr_reads %>% filter(type != "control")
sum(Nbr_samples$nb_reads) #[1] 1953583
#number of reads for the leaf & root
leaf <- Nbr_samples %>% filter(organ != "leaf")
sum(leaf$nb_reads) #[1] 875699
root <- Nbr_samples %>% filter(organ != "root")
sum(root$nb_reads) #[1] 1077884
#removing reads below 300 reads
Nbr_samples <- Nbr_samples %>% filter(nb_reads > 300)
summary(Nbr_samples$nb_reads)
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 2104   10101   12738   14800   17192   52730
A <- ggplot(Nbr_reads, aes(x = nb_reads, fill = type))+
geom_histogram() +
theme_minimal() +
theme(legend.position = "bottom")+
theme(text = element_text(size = 12))
B <- ggplot(Nbr_samples, aes(x = nb_reads))+ #histogram on the samples only after removing one individual leaf that had a low number of reads
geom_histogram() +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 40000, by = 5000))+
theme(text = element_text(size = 12))
ggarrange(A, B, labels = c("nr_reads for all with controls" ,"nb_reads for samples (leaf & root)"))
# Compute the number of motus per pcr
MetabarList$pcrs$nb_motus <- rowSums(MetabarList$reads>0)
summary(MetabarList$pcrs$nb_motus <181) #only 1 beneath 181 at 8.
#average: 584.4 per samples
length(MetabarList$motus$sequence)
# 7634 #nombre d'OTUs unique.
# Create an input table (named check1) for ggplot of 3 columns:
#  (i) control type
#  (ii) a vector indicated whether it corresponds to nb_reads or nb_motus,
#  (iii) the corresponding values.
check1 <- melt(MetabarList$pcrs[,c("control_type", "nb_reads", "nb_motus")])
check1$control_type[which(check1$control_type == "sequencing")] <- "sterilisation"
ggplot(data <- check1, aes(x=control_type, y=value, color=control_type)) +
geom_boxplot() + theme_bw() +
geom_jitter(alpha=0.2) +
scale_color_manual(values = c("brown", "red", "cyan4","pink"), na.value = "darkgrey") +
facet_wrap(~variable, scales = "free_y") +
theme(axis.text.x = element_text(angle=45, h=1))
# Using the nb_reads and nb_motus defined previously
ggplot(MetabarList$pcrs, aes(x=nb_reads, y=nb_motus, color = control_type)) +
geom_point() + theme_bw() +
scale_y_log10() + scale_x_log10() +
scale_color_manual(values = c("brown", "red", "cyan4","pink"), na.value = "darkgrey")
# Check results
summary_metabarlist(MetabarList)
natura <- contaslayer(MetabarList,
control_types = "sequencing", #but sterilization
output_col = "not_a_sterilisation_conta")
table(natura$motus$not_a_sterilisation_conta)
# FALSE  TRUE
#    62  7572
# Identify the most common contaminant
# get contaminant ids
conta_sterilisation <- natura$motus$path[which(natura[["motus"]][["not_a_sterilisation_conta"]] == FALSE)]
conta_sterilisation<- as.data.frame(conta_sterilisation)
conta_sterilisation<- conta_sterilisation %>% separate(conta_sterilisation, into = c('domain','phylum', 'class', 'order', 'family', 'genus'), sep = ";", FALSE)
conta_sterilisation <- conta_sterilisation %>%
rename(path = conta_sterilisation)
conta_sterilisation <- left_join(conta_sterilisation, natura$motus)
# Compute relative abundance of all pcr contaminants together
a <- data.frame(conta.relab.sterilisation = rowSums(natura$reads[,!natura$motus$not_a_sterilisation_conta]) /
rowSums(natura$reads))
# Add information on control types
a$control_type <- natura$pcrs$control_type[match(rownames(a), rownames(natura$pcrs))]
ggplot(a, aes(x=control_type, y=conta.relab.sterilisation, color=control_type)) +
geom_boxplot() + geom_jitter(alpha=0.5) +
scale_color_manual(values = c("brown", "red", "cyan4","pink"), na.value = "darkgrey") +
labs(x=NULL, y="Prop. Reads (log10)") +
theme_bw() +
scale_y_log10()
natura <- contaslayer(natura,
control_types = "pcr",
output_col = "not_a_pcr_conta")
table(natura$motus$not_a_pcr_conta)
# FALSE  TRUE
#   580  7054
# Identify the most common contaminant
# get contaminant ids
conta_pcr <- natura$motus$path[which(natura[["motus"]][["not_a_pcr_conta"]] == FALSE)]
conta_pcr <- as.data.frame(conta_pcr)
conta_pcr<- conta_pcr %>% separate(conta_pcr, into = c('domain','phylum', 'class', 'order', 'family', 'genus'), sep = ";", FALSE)
conta_pcr <- conta_pcr %>%
rename(path = conta_pcr)
conta_pcr <- left_join(conta_pcr, natura$motus)
# Compute relative abundance of all pcr contaminants together
a$conta.relab.pcr <- rowSums(natura$reads[,!natura$motus$not_a_pcr_conta]) /
rowSums(natura$reads)
ggplot(a, aes(x=control_type, y=conta.relab.pcr, color=control_type)) +
geom_boxplot() + geom_jitter(alpha=0.5) +
scale_color_manual(values = c("brown", "red", "cyan4","pink"), na.value = "darkgrey") +
labs(x=NULL, y="Prop. Reads (log10)") +
theme_bw() +
scale_y_log10()
natura <- contaslayer(natura,
control_types = "extraction",
output_col = "not_an_extraction_conta")
table(natura$motus$not_an_extraction_conta)
#>
#FALSE  TRUE
#  56  7578
conta_extraction <- natura$motus$path[which(natura[["motus"]][["not_an_extraction_conta"]] == FALSE)]
conta_extraction <- as.data.frame(conta_extraction)
conta_extraction<- conta_extraction %>% separate(conta_extraction, into = c('domain','phylum', 'class', 'order', 'family', 'genus'), sep = ";", FALSE)
conta_extraction <- conta_extraction %>%
rename(path = conta_extraction)
conta_extraction <- left_join(conta_extraction, natura$motus)
# Compute relative abundance of all pcr contaminants together
a$conta.relab.extraction <- rowSums(natura$reads[,!natura$motus$not_an_extraction_conta]) /
rowSums(natura$reads)
ggplot(a, aes(x=control_type, y=conta.relab.extraction, color=control_type)) +
geom_boxplot() + geom_jitter(alpha=0.5) +
scale_color_manual(values = c("brown", "red", "cyan4","pink"), na.value = "darkgrey") +
labs(x=NULL, y="Prop. Reads (log10)") +
theme_bw() +
scale_y_log10() #ca va pas trop de conta dans les echantillons
#flag pcrs with total contaminant relative abundance > 10% of reads
#1 for contaminants that came from pcr
#2 for contaminants that came from extraction
#to get the detail
# natura$pcrs$low_contamination_level <-
#   ifelse(a$conta.relab.sterilisation[match(rownames(natura$pcrs), rownames(a))]>1e-1,  1,
#   ifelse(a$conta.relab.extraction[match(rownames(natura$pcrs), rownames(a))]>1e-1,  2,
#   ifelse(a$conta.relab.pcr[match(rownames(natura$pcrs), rownames(a))]>1e-1, 3, 0)))
#to do it all at once
natura$pcrs$low_contamination_level <-
ifelse(a$conta.relab.sterilisation[match(rownames(natura$pcrs), rownames(a))]>1e-1,  F,
ifelse(a$conta.relab.extraction[match(rownames(natura$pcrs), rownames(a))]>1e-1,  F,
ifelse(a$conta.relab.pcr[match(rownames(natura$pcrs), rownames(a))]>1e-1, F, T)))
# Proportion of potentially functional (TRUE) vs. failed (FALSE) pcrs
# (controls included) based on this criterion
table(natura$pcrs$low_contamination_level) / nrow(natura$pcrs)
#0, 0.94545455 : no contamination (all samples)
#1, 0.01212121 : conta from sterilisation (2, one from the sterilisation and one pcrs)
#2  0.03030303 : conta from extraction (5: 2 ext + 3 pcr)
#3  0.01212121 : conta from pcr (2 pcr)
#all at once
#      FALSE       TRUE
# 0.05454545 0.94545455
#Flag MOTUs corresponding to target (TRUE) vs. non-target (FALSE) taxa
natura$motus$target_taxon <- grepl("Bacteria", natura$motus$path)
# Proportion of each of these over total number of MOTUs
table(natura$motus$target_taxon) / nrow(natura$motus)
#   FALSE       TRUE
# 0.02384071 0.97615929
#ce sont des archÃ©es
# Intersection with extraction contaminant flags (not contaminant = T)
table(natura$motus$target_taxon,
natura$motus$not_a_sterilisation_conta) #5 MOTUs as non-taget, which were already flagged as potential sterilisation conta
table(natura$motus$target_taxon,
natura$motus$not_an_extraction_conta) #4 MOTUs as non-taget, which were already flagged as potential ext conta
table(natura$motus$target_taxon,
natura$motus$not_a_pcr_conta) #29 MOTUs as non-taget, which were already flagged as potential pcr conta
ggplot(natura$pcrs, aes(nb_reads, fill= type)) +
geom_histogram(bins=40, color="grey") +
geom_vline(xintercept = 1e3, lty=2, color="orange") + # threshold
scale_x_log10() +
labs(x="# Reads (with all MOTUs and PCRs)",
y="# PCRs") +
theme_bw() +
theme(panel.grid = element_blank())
#fortunately, samples yield high amount of reads.
# Flag pcrs with an acceptable sequencing depth (TRUE) or inacceptable one (FALSE)
natura$pcrs$seqdepth_ok <- ifelse(natura$pcrs$nb_reads < 1e3, F, T)
# Proportion of each of these over total number of pcrs, control excluded
table(natura$pcrs$seqdepth_ok[natura$pcrs$type=="sample"]) /
nrow(natura$pcrs[natura$pcrs$type=="sample",])
#
# FALSE        TRUE
# 0.007518797 0.992481203
# Define a vector of thresholds to test
thresholds <- c(0,1e-4,1e-3, 1e-2, 3e-2, 5e-2)
# Run the tests and stores the results in a list
tests <- lapply(thresholds, function(x) tagjumpslayer(natura,x))
names(tests) <- paste("t_", thresholds, sep="")
# Format the data for ggplot with amount of reads at each threshold
tmp <- melt(as.matrix(do.call("rbind", lapply(tests, function(x) rowSums(x$reads)))))
colnames(tmp) <- c("threshold", "sample", "abundance")
# Add richness in MOTUs at each threshold
tmp$richness <-
melt(as.matrix(do.call("rbind", lapply(tests, function(x) {
rowSums(x$reads > 0)
}))))$value
# Add control type information on pcrs and make data curation threshold numeric
tmp$controls <- natura$pcrs$control_type[match(tmp$sample, rownames(natura$pcrs))]
tmp$threshold <- as.numeric(gsub("t_", "", tmp$threshold))
# New table formatting for ggplot
tmp2 <- melt(tmp, id.vars=colnames(tmp)[-grep("abundance|richness", colnames(tmp))])
ggplot(tmp2, aes(x=as.factor(threshold), y=value)) +
geom_boxplot(color="grey40") +
geom_vline(xintercept = which(levels(as.factor(tmp2$threshold)) == "0.01"), col="orange", lty=2) +
geom_jitter(aes(color=controls), width = 0.2, alpha=0.5) +
scale_color_manual(values = c("brown", "red", "cyan4","pink"), na.value = "darkgrey") +
facet_wrap(~variable+controls, scale="free_y", ncol=4) +
theme_bw() +
scale_y_log10() +
labs(x="MOTU pcr : total abundance filtering threshold", y="# Reads/MOTUs") +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
axis.text.x = element_text(angle=40, h=1),
legend.position = "none")
# A threshold of 0.01 leads to a drop in both the number of reads and of MOTUs in sequencing negative controls. This drop is also noticeable in terms of the number of MOTUs in pcrs obtained from other controls as compared to those obtained from samples. The former are expected to be void of environmental MOTUs, and tag-jumps should be more visible/important in these pcrs. Note that this procedure primarily affects MOTU diversity in pcrs, and poorly the number of reads in pcrs.
#
# As for above, pcrs containing large amounts of MOTUs identified as potentially artifactual or where tag-jumps filtering strongly affects the number of reads in pcrs can be flagged as potentially failed
# Create a table of MOTUs quality criteria
# noise is identified as FALSE in natura, the "!" transforms it to TRUE
motus.qual <- !natura$motus[,c("not_an_extraction_conta", "not_a_pcr_conta", "not_a_sterilisation_conta", "target_taxon")]
colnames(motus.qual) <- c("extraction_conta", "pcr_conta", "sterilisation_conta", "untargeted_taxon")
# Proportion of MOTUs potentially artifactual (TRUE) based on the criteria used
prop.table(table(apply(motus.qual, 1, sum) > 0))
#
#    FALSE     TRUE
# 0.889704 0.110296
# Corresponding proportion of artifactual reads (TRUE)
#get the number of reads per motus
natura$motus$count <- colSums(natura$reads>0)
prop.table(xtabs(natura$motus$count~apply(motus.qual, 1, sum) > 0))
#    FALSE      TRUE
# 0.9347926 0.0652074
# Proportion of MOTUs and reads potentially artifactual for each criterion
apply(motus.qual, 2, sum) / nrow(motus.qual)
apply(motus.qual, 2, function(x) sum(natura$motus$count[x])/sum(natura$motus$count))
tmp.motus <-
apply(sapply(1:ncol(motus.qual), function(x) {
ifelse(motus.qual[,x]==T, colnames(motus.qual)[x], NA)}), 1, function(x) {
paste(sort(unique(x)), collapse = "|")
})
tmp.motus <- as.data.frame(gsub("^$", "not_artefactual", tmp.motus))
colnames(tmp.motus) <-  "artefact_type"
ggplot(tmp.motus, aes(x=1, fill=artefact_type)) +
geom_bar() +  xlim(0, 2) +
labs(fill="Artifact type") +
coord_polar(theta="y") + theme_void() +
scale_fill_brewer(palette = "Set3") +
theme(legend.direction = "vertical") +
ggtitle("MOTUs artefacts overview")
#
# The above shows that MOTUs flagged as potentially artefactual account for ca. 10% of the datasetâs diversity and roughly the same in terms of readcount. Most of these artifact MOTUs are rare and correspond to sequences which are potentially highly degraded, with very low sequence similarity against the EMBL reference database. The most abundant artifacts MOTUs were identified as contaminants.
#let's do the same for pcrs
# Create a table of pcrs quality criteria
# noise is identified as FALSE in natura, the "!" transforms it to TRUE
pcrs.qual <- !natura$pcrs[,c("low_contamination_level", "seqdepth_ok")]
colnames(pcrs.qual) <- c("high_contamination_level", "low_seqdepth")
# Proportion of pcrs potentially artifactual (TRUE) based on the criteria used
# excluding controls
prop.table(table(apply(pcrs.qual[natura$pcrs$type=="sample",], 1, sum) > 0))
# FALSE        TRUE
# 0.992481203 0.007518797
# Proportion of MOTUs and reads potentially artifactual for each criterion
apply(pcrs.qual[natura$pcrs$type=="sample",], 2, sum) / nrow(pcrs.qual[natura$pcrs$type=="sample",])
#
# low_seqdepth high_contamination_level
#              0.007518797              0.000000000
tmp.pcrs <-
apply(sapply(1:ncol(pcrs.qual), function(x) {
ifelse(pcrs.qual[natura$pcrs$type=="sample",x]==T,
colnames(pcrs.qual)[x], NA)}), 1, function(x) {
paste(sort(unique(x)), collapse = "|")
})
tmp.pcrs <- as.data.frame(gsub("^$", "not_artefactual", tmp.pcrs))
colnames(tmp.pcrs) <- "artefact_type"
ggplot(tmp.pcrs, aes(x=1, fill=artefact_type)) +
geom_bar() +  xlim(0, 2) +
labs(fill="Artifact type") +
coord_polar(theta="y") + theme_void() +
scale_fill_brewer(palette = "Set3") +
theme(legend.direction = "vertical") +
ggtitle("PCR artefacts overview")
# Use tag-jump corrected metabarlist with the threshold identified above
tmp <- tests[["t_0.01"]]
#for pcrs
# Subset on pcrs and keep only controls
tmp_clean <- subset_metabarlist(tmp, "pcrs",
indices = rowSums(tmp$pcrs[,c("low_contamination_level","seqdepth_ok")]) == 2 &
tmp$pcrs$type == "sample")
summary_metabarlist(tmp_clean)
# Subset on MOTUs: we keep motus that are defined as TRUE following the
# three criteria below (sum of three TRUE is equal to 3 with the rowSums function)
natura_clean <- subset_metabarlist(tmp_clean, "motus",
indices = rowSums(tmp_clean$motus[,c("not_an_extraction_conta", "target_taxon",
"not_a_pcr_conta", "not_a_sterilisation_conta")]) == 4)
summary_metabarlist(natura_clean)
#
# $dataset_dimension
#         n_row n_col
# reads     132  6792
# motus    6792    18
# pcrs      132    12
# samples   132    11
#
# $dataset_statistics
#         nb_reads nb_motus avg_reads sd_reads avg_motus sd_motus
# pcrs     1767613     6792  13391.01 7181.066  512.4924 149.7122
# samples  1767613     6792  13391.01 7181.066  512.4924 149.7122
#check if previsous subsetting lead to NAs
if(sum(colSums(tmp_clean$reads)==0)>0){print("empty motus present")}
if(sum(rowSums(natura_clean$reads)==0)>0){print("empty pcrs present")}
natura_clean$motus$count = colSums(natura_clean$reads)
natura_clean$pcrs$nb_reads_postmetabaR = rowSums(natura_clean$reads)
natura_clean$pcrs$nb_motus_postmetabaR = rowSums(ifelse(natura_clean$reads>0, T, F))
check <- melt(natura_clean$pcrs[,c("nb_reads", "nb_reads_postmetabaR",
"nb_motus", "nb_motus_postmetabaR")])
check$type <- ifelse(grepl("motus", check$variable), "richness", "abundance")
ggplot(data = check, aes(x = variable, y = value)) +
geom_boxplot( color = "darkgrey") +
geom_jitter(alpha=0.1, color = "darkgrey") +
theme_bw() +
facet_wrap(~type, scales = "free", ncol = 5) +
theme(axis.text.x = element_text(angle=45, h=1))
#The sequencing depth was not greatly affected by the trimming. But the richness of pcrs was lowered
# Get row data only for samples
tmp <- subset_metabarlist(natura, table = "pcrs",
indices = natura$pcrs$type == "sample")
# Add sample biological information for checks
tmp$pcrs$organ <- tmp$samples$organ[match(tmp$pcrs$sample_id, rownames(tmp$samples))]
tmp$samples$name <- paste0(tmp$samples$Genus, "_", tmp$samples$Species)
tmp$pcrs$name <- tmp$samples$name[match(tmp$pcrs$sample_id, rownames(tmp$samples))]
tmp$pcrs$family <- tmp$samples$Family[match(tmp$pcrs$sample_id, rownames(tmp$samples))]
natura_clean$pcrs$organ <-
natura_clean$samples$organ[match(natura_clean$pcrs$sample_id,
rownames(natura_clean$samples))]
natura_clean$samples$name <- paste0(natura_clean$samples$Genus, "_", natura_clean$samples$Species)
natura_clean$pcrs$name <- natura_clean$samples$name[match(natura_clean$pcrs$sample_id, rownames(natura_clean$samples))]
natura_clean$pcrs$family <- natura_clean$samples$Family[match(natura_clean$pcrs$sample_id, rownames(natura_clean$samples))]
# Build PCoA ordinations
mds1 <- check_pcr_repl(tmp,
groups = paste(tmp$pcrs$organ, tmp$pcrs$name, sep = " | "))
mds2 <- check_pcr_repl(natura_clean,
groups =  paste(natura_clean$pcrs$organ, natura_clean$pcrs$name, sep = " | "))
# Custom colors
a <- mds1 + labs(color = "organ | name") +
#  scale_color_manual(values = c("brown4", "brown1", "goldenrod4", "goldenrod1")) +
theme(legend.position = "none") +
ggtitle("Raw data")
b <- mds2 + labs(color = "organ | name") +
#scale_color_manual(values = c("brown4", "brown1", "goldenrod4", "goldenrod1")) +
ggtitle("Clean data")
# Assemble plots
species <- ggarrange(a, b, legend = "bottom" ,common.legend = T)
ggsave(filename = "PCoA_organ_species.jpeg", plot = species, width = 10, height = 8)
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
#no need for below, we have all the info with the NewMetabarlist_clean
#both organs
write.csv(natura_clean$motus,"motus_without_contamiant.csv")
write.csv(t(natura_clean$motus),"transposed_motus_without_contamiant.csv")
write.csv(natura_clean$reads,"reads_without_contamiant.csv")
write.csv(t(natura_clean$reads),"transposed_reads_without_contamiant.csv")
write.csv(natura_clean$samples,"samples_without_contamiant.csv")
write.csv(natura_clean$pcrs,"pcrs_without_contamiant.csv")
write.csv(t(natura_clean$pcrs),"transposed_pcrs_without_contamiant.csv")
#only leaves
leaf_metabar_clean <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
write.csv(leaf_metabar_clean$motus,"leaf_motus_without_contamiant.csv")
write.csv(t(leaf_metabar_clean$motus),"leaf_transposed_motus_without_contamiant.csv")
write.csv(leaf_metabar_clean$reads,"leaf_reads_without_contamiant.csv")
write.csv(t(leaf_metabar_clean$reads),"leaf_transposed_reads_without_contamiant.csv")
write.csv(leaf_metabar_clean$samples,"leaf_samples_without_contamiant.csv")
write.csv(leaf_metabar_clean$pcrs,"leaf_pcrs_without_contamiant.csv")
write.csv(t(leaf_metabar_clean$pcrs),"leaf_transposed_pcrs_without_contamiant.csv")
#only roots
root_metabar_clean <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "root")
write.csv(root_metabar_clean$motus,"root_motus_without_contamiant.csv")
write.csv(t(root_metabar_clean$motus),"root_transposed_motus_without_contamiant.csv")
write.csv(root_metabar_clean$reads,"root_reads_without_contamiant.csv")
write.csv(t(root_metabar_clean$reads),"root_transposed_reads_without_contamiant.csv")
write.csv(root_metabar_clean$samples,"root_samples_without_contamiant.csv")
write.csv(root_metabar_clean$pcrs,"root_pcrs_without_contamiant.csv")
write.csv(t(root_metabar_clean$pcrs),"root_transposed_pcrs_without_contamiant.csv")
# Aggregate the metabarlist at the class level
natura_clean_phy <-
aggregate_motus(natura_clean, groups= natura_clean$motus$taxo_court)
# Aggregate per organ/genus
tmp <- aggregate(natura_clean_phy$reads, by = list(
paste(natura_clean_phy$samples$organ,
natura_clean_phy$samples$Genus,
sep = " | ")), sum)
View(tmp)
# Aggregate the metabarlist at the class level
natura_clean_phy <-
aggregate_motus(natura_clean, groups= natura_clean$motus$taxo_court)
# Aggregate per organ/genus
tmp <- aggregate(natura_clean_phy$reads, by = list(
paste(natura_clean_phy$samples$organ,
natura_clean_phy$samples$Genus,
sep = " | ")), sum)
View(natura_clean)
View(natura_clean[["motus"]])
# Aggregate the metabarlist at the class level
natura_clean_phy <-
aggregate_motus(natura_clean, groups= natura_clean$motus$phylum)
# Aggregate per organ/genus
tmp <- aggregate(natura_clean_phy$reads, by = list(
paste(natura_clean_phy$samples$organ,
natura_clean_phy$samples$Genus,
sep = " | ")), sum)
#plot phyla
ggplot(tmp, aes(x=Group.1, y=value, fill=variable)) +
geom_bar(stat="identity") +
labs(x=NULL, y="#reads", fill="Phyla") +
coord_flip() + theme_bw() +
theme(legend.position = "bottom") +
ggtitle("Bacteria - Phyla")
# Aggregate per organ/genus
tmp <-
melt(aggregate(natura_clean_phy$reads, by = list(
paste(natura_clean_phy$samples$organ,
natura_clean_phy$samples$name,
sep = " | ")), sum))
#plot phyla
ggplot(tmp, aes(x=Group.1, y=value, fill=variable)) +
geom_bar(stat="identity") +
labs(x=NULL, y="#reads", fill="Phyla") +
coord_flip() + theme_bw() +
theme(legend.position = "bottom") +
ggtitle("Bacteria - Phyla")
#plot phyla
A <- ggplot(tmp, aes(x=Group.1, y=value, fill=variable)) +
geom_bar(stat="identity") +
labs(x=NULL, y="#reads", fill="Phyla") +
coord_flip() + theme_bw() +
theme(legend.position = "bottom") +
ggtitle("Bacteria - Phyla")
ggsave(filename = "Bacteria_bargraph.jpeg", plot = A, width = 10, height = 8)
View(assign_motus)
#organ
tmp_organ <-  melt(aggregate(natura_clean_phy$reads, by = natura_clean_phy$samples$organ), sum)
#organ
tmp_organ <-  melt(aggregate(natura_clean_phy$reads, by = natura_clean_phy$samples$organ, sum))
#organ
tmp_organ <-  aggregate(natura_clean_phy$reads, by = natura_clean_phy$samples$organ, sum)
#organ
tmp_organ <-  melt(aggregate(natura_clean_phy$reads, by = list(
natura_clean_phy$samples$organ), sum))
B <- ggplot(tmp, aes(x=Group.1, y=value, fill=variable)) +
geom_bar(stat="identity") +
labs(x=NULL, y="#reads", fill="Phyla") +
coord_flip() + theme_bw() +
theme(legend.position = "bottom") +
ggtitle("Bacteria")
B
B <- ggplot(tmp_organ, aes(x=Group.1, y=value, fill=variable)) +
geom_bar(stat="identity") +
labs(x=NULL, y="#reads", fill="Phyla") +
coord_flip() + theme_bw() +
theme(legend.position = "bottom") +
ggtitle("Bacteria")
B
ggsave(filename = "Bacteria_organ_bargraph.jpeg", plot = B, width = 10, height = 8)
