Diversity <- c("Shannon - 16S - Root")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.shannon.root <-   data.frame(Organ, Diversity, Levels, Variances)
df2.leaf <- df2 %>% filter(organ == "leaf")
model_null <- nlme::lme(Richness~ 1,  random=~1|name, data = df2.leaf, na.action = na.omit, method = "ML")
model_trait <- nlme::lme(Richness ~ RootShoot + LA_Total+ LSWC,  random=~1|name, data = df2.leaf, na.action = na.omit, method = "ML")
#model_pcnm <-  nlme::lme(microbio ~ MEM1 + MEM2 + MEM3 + MEM4,  random=~1|Name, data = env, na.action = na.omit, method = "ML")
# Extract the variance components
Var_components <-lme4::VarCorr(model_trait)
var_sp <- as.numeric(Var_components[1,1]) #for the random effects - species
var_res <- as.numeric(Var_components[2,1]) #model residual
# Obtain the variance of the random effect in the null model.
random_variance_null <- as.numeric(lme4::VarCorr(model_null)[1,1])
# Obtain the residual variance
residual_variance_null <- as.numeric(lme4::VarCorr(model_null)[2,1])
# Obtain the total variance of the null model
v_0 <- random_variance_null + residual_variance_null
# Calculate the variance component linked to the traits by substracting the residual variance of the model (var_res) and the variance explained by the random factor, the species (var_sp), from the variance of the null model
# Variance partitioning
var_sp <- round(100 * var_sp / v_0)
var_res <- round(100 * var_res / v_0)
var_trait <- round(100 - (var_sp + var_res))  # or it works also , var_envt <- v_0 - var_indv - var_sp Marion calcul
Organ <- c("Leaf")
Diversity <- c("Richness")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.richness.leaf <-   data.frame(Organ, Diversity, Levels, Variances)
model_null <- nlme::lme(Shannon~ 1,  random=~1|name, data = df2.leaf, na.action = na.omit, method = "ML")
model_trait <- nlme::lme(Shannon ~ RootShoot + LA_Total+ LSWC,  random=~1|name, data = df2.leaf, na.action = na.omit, method = "ML")
#model_pcnm <-  nlme::lme(microbio ~ MEM1 + MEM2 + MEM3 + MEM4,  random=~1|Name, data = env, na.action = na.omit, method = "ML")
# Extract the variance components
Var_components <-lme4::VarCorr(model_trait)
var_sp <- as.numeric(Var_components[1,1]) #for the random effects - species
var_res <- as.numeric(Var_components[2,1]) #model residual
# Obtain the variance of the random effect in the null model.
random_variance_null <- as.numeric(lme4::VarCorr(model_null)[1,1])
# Obtain the residual variance
residual_variance_null <- as.numeric(lme4::VarCorr(model_null)[2,1])
# Obtain the total variance of the null model
v_0 <- random_variance_null + residual_variance_null
# Calculate the variance component linked to the traits by substracting the residual variance of the model (var_res) and the variance explained by the random factor, the species (var_sp), from the variance of the null model
# Variance partitioning
var_sp <- round(100 * var_sp / v_0)
var_res <- round(100 * var_res / v_0)
var_trait <- round(100 - (var_sp + var_res))  # or it works also , var_envt <- v_0 - var_indv - var_sp Marion calcul
Organ <- c("Leaf")
Diversity <- c("Shannon")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.shannon.leaf <-   data.frame(Organ, Diversity, Levels, Variances)
model_null <- nlme::lme(invSimpson~ 1,  random=~1|name, data = df2.leaf, na.action = na.omit, method = "ML")
model_trait <- nlme::lme(invSimpson ~ RootShoot + LA_Total+ LSWC,  random=~1|name, data = df2.leaf, na.action = na.omit, method = "ML")
#model_pcnm <-  nlme::lme(microbio ~ MEM1 + MEM2 + MEM3 + MEM4,  random=~1|Name, data = env, na.action = na.omit, method = "ML")
# Extract the variance components
Var_components <-lme4::VarCorr(model_trait)
var_sp <- as.numeric(Var_components[1,1]) #for the random effects - species
var_res <- as.numeric(Var_components[2,1]) #model residual
# Obtain the variance of the random effect in the null model.
random_variance_null <- as.numeric(lme4::VarCorr(model_null)[1,1])
# Obtain the residual variance
residual_variance_null <- as.numeric(lme4::VarCorr(model_null)[2,1])
# Obtain the total variance of the null model
v_0 <- random_variance_null + residual_variance_null
# Calculate the variance component linked to the traits by substracting the residual variance of the model (var_res) and the variance explained by the random factor, the species (var_sp), from the variance of the null model
# Variance partitioning
var_sp <- round(100 * var_sp / v_0)
var_res <- round(100 * var_res / v_0)
var_trait <- round(100 - (var_sp + var_res))  # or it works also , var_envt <- v_0 - var_indv - var_sp Marion calcul
Organ <- c("Leaf")
Diversity <- c("invSimpsonLeaf")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.invSimpson.leaf <-   data.frame(Organ, Diversity, Levels, Variances)
df2.root<- df2 %>% filter(organ == "root")
model_null <- nlme::lme(Richness~ 1,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
model_trait <- nlme::lme(Richness ~ RootShoot + LA_Total+ LSWC,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
#model_pcnm <-  nlme::lme(microbio ~ MEM1 + MEM2 + MEM3 + MEM4,  random=~1|Name, data = env, na.action = na.omit, method = "ML")
# Extract the variance components
Var_components <-lme4::VarCorr(model_trait)
var_sp <- as.numeric(Var_components[1,1]) #for the random effects - species
var_res <- as.numeric(Var_components[2,1]) #model residual
# Obtain the variance of the random effect in the null model.
random_variance_null <- as.numeric(lme4::VarCorr(model_null)[1,1])
# Obtain the residual variance
residual_variance_null <- as.numeric(lme4::VarCorr(model_null)[2,1])
# Obtain the total variance of the null model
v_0 <- random_variance_null + residual_variance_null
# Calculate the variance component linked to the traits by substracting the residual variance of the model (var_res) and the variance explained by the random factor, the species (var_sp), from the variance of the null model
# Variance partitioning
var_sp <- round(100 * var_sp / v_0)
var_res <- round(100 * var_res / v_0)
var_trait <- round(100 - (var_sp + var_res))  # or it works also , var_envt <- v_0 - var_indv - var_sp Marion calcul
Organ <- c("Root")
Diversity <- c("Richness")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.richness.root <-   data.frame(Organ, Diversity, Levels, Variances)
model_null <- nlme::lme(Shannon~ 1,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
model_trait <- nlme::lme(Shannon ~ RootShoot + LA_Total+ LSWC,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
#model_pcnm <-  nlme::lme(microbio ~ MEM1 + MEM2 + MEM3 + MEM4,  random=~1|Name, data = env, na.action = na.omit, method = "ML")
# Extract the variance components
Var_components <-lme4::VarCorr(model_trait)
var_sp <- as.numeric(Var_components[1,1]) #for the random effects - species
var_res <- as.numeric(Var_components[2,1]) #model residual
# Obtain the variance of the random effect in the null model.
random_variance_null <- as.numeric(lme4::VarCorr(model_null)[1,1])
# Obtain the residual variance
residual_variance_null <- as.numeric(lme4::VarCorr(model_null)[2,1])
# Obtain the total variance of the null model
v_0 <- random_variance_null + residual_variance_null
# Calculate the variance component linked to the traits by substracting the residual variance of the model (var_res) and the variance explained by the random factor, the species (var_sp), from the variance of the null model
# Variance partitioning
var_sp <- round(100 * var_sp / v_0)
var_res <- round(100 * var_res / v_0)
var_trait <- round(100 - (var_sp + var_res))  # or it works also , var_envt <- v_0 - var_indv - var_sp Marion calcul
Organ <- c("Root")
Diversity <- c("Shannon - 16S - Root")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.shannon.root <-   data.frame(Organ, Diversity, Levels, Variances)
model_null <- nlme::lme(invSimpson~ 1,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
model_trait <- nlme::lme(invSimpson ~ RootShoot + LA_Total+ LSWC,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
#model_pcnm <-  nlme::lme(microbio ~ MEM1 + MEM2 + MEM3 + MEM4,  random=~1|Name, data = env, na.action = na.omit, method = "ML")
# Extract the variance components
Var_components <-lme4::VarCorr(model_trait)
var_sp <- as.numeric(Var_components[1,1]) #for the random effects - species
var_res <- as.numeric(Var_components[2,1]) #model residual
# Obtain the variance of the random effect in the null model.
random_variance_null <- as.numeric(lme4::VarCorr(model_null)[1,1])
# Obtain the residual variance
residual_variance_null <- as.numeric(lme4::VarCorr(model_null)[2,1])
# Obtain the total variance of the null model
v_0 <- random_variance_null + residual_variance_null
# Calculate the variance component linked to the traits by substracting the residual variance of the model (var_res) and the variance explained by the random factor, the species (var_sp), from the variance of the null model
# Variance partitioning
var_sp <- round(100 * var_sp / v_0)
var_res <- round(100 * var_res / v_0)
var_trait <- round(100 - (var_sp + var_res))  # or it works also , var_envt <- v_0 - var_indv - var_sp Marion calcul
Organ <- c("Root")
Diversity <- c("invSimpson - 16S - Root")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.invSimpson.root <-   data.frame(Organ, Diversity, Levels, Variances)
vars <- rbind(vars.richness.leaf, vars.shannon.leaf, vars.invSimpson.leaf, vars.richness.root, vars.shannon.root, vars.invSimpson.root)
vars
model_null <- nlme::lme(Shannon~ 1,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
model_trait <- nlme::lme(Shannon ~ RootShoot + LA_Total+ LSWC,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
#model_pcnm <-  nlme::lme(microbio ~ MEM1 + MEM2 + MEM3 + MEM4,  random=~1|Name, data = env, na.action = na.omit, method = "ML")
# Extract the variance components
Var_components <-lme4::VarCorr(model_trait)
var_sp <- as.numeric(Var_components[1,1]) #for the random effects - species
var_res <- as.numeric(Var_components[2,1]) #model residual
# Obtain the variance of the random effect in the null model.
random_variance_null <- as.numeric(lme4::VarCorr(model_null)[1,1])
# Obtain the residual variance
residual_variance_null <- as.numeric(lme4::VarCorr(model_null)[2,1])
# Obtain the total variance of the null model
v_0 <- random_variance_null + residual_variance_null
# Calculate the variance component linked to the traits by substracting the residual variance of the model (var_res) and the variance explained by the random factor, the species (var_sp), from the variance of the null model
# Variance partitioning
var_sp <- round(100 * var_sp / v_0)
var_res <- round(100 * var_res / v_0)
var_trait <- round(100 - (var_sp + var_res))  # or it works also , var_envt <- v_0 - var_indv - var_sp Marion calcul
Organ <- c("Root")
Diversity <- c("Shannon")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.shannon.root <-   data.frame(Organ, Diversity, Levels, Variances)
model_null <- nlme::lme(invSimpson~ 1,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
model_trait <- nlme::lme(invSimpson ~ RootShoot + LA_Total+ LSWC,  random=~1|name, data = df2.root, na.action = na.omit, method = "ML")
#model_pcnm <-  nlme::lme(microbio ~ MEM1 + MEM2 + MEM3 + MEM4,  random=~1|Name, data = env, na.action = na.omit, method = "ML")
# Extract the variance components
Var_components <-lme4::VarCorr(model_trait)
var_sp <- as.numeric(Var_components[1,1]) #for the random effects - species
var_res <- as.numeric(Var_components[2,1]) #model residual
# Obtain the variance of the random effect in the null model.
random_variance_null <- as.numeric(lme4::VarCorr(model_null)[1,1])
# Obtain the residual variance
residual_variance_null <- as.numeric(lme4::VarCorr(model_null)[2,1])
# Obtain the total variance of the null model
v_0 <- random_variance_null + residual_variance_null
# Calculate the variance component linked to the traits by substracting the residual variance of the model (var_res) and the variance explained by the random factor, the species (var_sp), from the variance of the null model
# Variance partitioning
var_sp <- round(100 * var_sp / v_0)
var_res <- round(100 * var_res / v_0)
var_trait <- round(100 - (var_sp + var_res))  # or it works also , var_envt <- v_0 - var_indv - var_sp Marion calcul
Organ <- c("Root")
Diversity <- c("invSimpson")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.invSimpson.root <-   data.frame(Organ, Diversity, Levels, Variances)
vars <- rbind(vars.richness.leaf, vars.shannon.leaf, vars.invSimpson.leaf, vars.richness.root, vars.shannon.root, vars.invSimpson.root)
vars
#vars
#plot the results
vars$Levels <- as.factor(vars$Levels)
variance_plot<- vars %>%
mutate(Levels = factor(Levels, levels=c("Traits", "Species", "Residual"))) %>%
ggplot(aes(fill=Levels, y=Variances, x=Diversity)) +
geom_bar(position="stack", stat="identity") +
theme_minimal(base_size = 22) +
ylab("") + xlab("")+
theme(legend.text = element_text(face = "italic"),legend.position = "bottom") +
scale_fill_manual("", values=c("#029A88",  "#CCBC44", "#BBBBBB" ),
breaks=c("Traits", "Species", "Residual" ),
labels=c("Traits", "Species", "Residual" ))  +
coord_flip() +
scale_x_discrete(labels = scales::label_parse())+
facet_wrap(~organ)+
ggtitle("16S Variance partitioning")
variance_plot
variance_plot<- vars %>%
mutate(Levels = factor(Levels, levels=c("Traits", "Species", "Residual"))) %>%
ggplot(aes(fill=Levels, y=Variances, x=Diversity)) +
geom_bar(position="stack", stat="identity") +
theme_minimal(base_size = 22) +
ylab("") + xlab("")+
theme(legend.text = element_text(face = "italic"),legend.position = "bottom") +
scale_fill_manual("", values=c("#029A88",  "#CCBC44", "#BBBBBB" ),
breaks=c("Traits", "Species", "Residual" ),
labels=c("Traits", "Species", "Residual" ))  +
coord_flip() +
scale_x_discrete(labels = scales::label_parse())+
facet_wrap(~Organ)+
ggtitle("16S Variance partitioning")
variance_plot
model_null <- nlme::lme(invSimpson~ 1,  random=~1|name, data = df2.leaf, na.action = na.omit, method = "ML")
model_trait <- nlme::lme(invSimpson ~ RootShoot + LA_Total+ LSWC,  random=~1|name, data = df2.leaf, na.action = na.omit, method = "ML")
#model_pcnm <-  nlme::lme(microbio ~ MEM1 + MEM2 + MEM3 + MEM4,  random=~1|Name, data = env, na.action = na.omit, method = "ML")
# Extract the variance components
Var_components <-lme4::VarCorr(model_trait)
var_sp <- as.numeric(Var_components[1,1]) #for the random effects - species
var_res <- as.numeric(Var_components[2,1]) #model residual
# Obtain the variance of the random effect in the null model.
random_variance_null <- as.numeric(lme4::VarCorr(model_null)[1,1])
# Obtain the residual variance
residual_variance_null <- as.numeric(lme4::VarCorr(model_null)[2,1])
# Obtain the total variance of the null model
v_0 <- random_variance_null + residual_variance_null
# Calculate the variance component linked to the traits by substracting the residual variance of the model (var_res) and the variance explained by the random factor, the species (var_sp), from the variance of the null model
# Variance partitioning
var_sp <- round(100 * var_sp / v_0)
var_res <- round(100 * var_res / v_0)
var_trait <- round(100 - (var_sp + var_res))  # or it works also , var_envt <- v_0 - var_indv - var_sp Marion calcul
Organ <- c("Leaf")
Diversity <- c("invSimpson")
Levels <- c("Traits", "Species", "Residual")
Variances <- c(var_trait,var_sp,var_res)
vars.invSimpson.leaf <-   data.frame(Organ, Diversity, Levels, Variances)
vars <- rbind(vars.richness.leaf, vars.shannon.leaf, vars.invSimpson.leaf, vars.richness.root, vars.shannon.root, vars.invSimpson.root)
#vars
#plot the results
vars$Levels <- as.factor(vars$Levels)
variance_plot<- vars %>%
mutate(Levels = factor(Levels, levels=c("Traits", "Species", "Residual"))) %>%
ggplot(aes(fill=Levels, y=Variances, x=Diversity)) +
geom_bar(position="stack", stat="identity") +
theme_minimal(base_size = 22) +
ylab("") + xlab("")+
theme(legend.text = element_text(face = "italic"),legend.position = "bottom") +
scale_fill_manual("", values=c("#029A88",  "#CCBC44", "#BBBBBB" ),
breaks=c("Traits", "Species", "Residual" ),
labels=c("Traits", "Species", "Residual" ))  +
coord_flip() +
scale_x_discrete(labels = scales::label_parse())+
facet_wrap(~Organ)+
ggtitle("16S Variance partitioning")
variance_plot
load("./resources/Metabarlist_natura_clean_16S_traits.Rdata")
#save(leaf, file = "./results/Metabarlist_natura_clean_16S_leaf_traits.Rdata")
set.seed(123456)
library(tidyverse)
library(labdsv)
library(dplyr)
library(FactoMineR)
library(car)
library(missMDA)
library(metabaR)
library(ggplot2)
library(corrplot)
library(factoextra)
library(MASS)
library(cowplot)
library(nlme)
library(MuMIn)
library(multcomp)
library(ggpubr)
library(ade4)
library(hillR)
library(adespatial)
library(reldist)
library(bipartite)
library(vegan)
library(scales)
library(phyloseq)
library(reshape2)
library(ggpubr)
library(BiocManager)
#BiocManager::install("microbiome")
library(microbiome)
setwd("E:/Sophie_pipeline/obitools")
load("./resources/Metabarlist_natura_clean_16S_traits.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
# Calculate Bray-Curtis dissimilarity matrix on relative abundances
microbio <- vegdist(vegan::decostand(leaf$reads, method = "hellinger"), method = "bray")
# Get trait variables that act as environmental variables that would shape the microbial dataset
env <- leaf$samples[,c(4, 9:12, 17:37)]
names(env)
# perform dbRDA analysis
ord <- dbrda(microbio ~ RootShoot + RootLength_Total+ LA_Total+ Height + StemDiameter + NbLeaves + fvfm  + SRL + LSWC + LT + Condition(name), data = env, add = "lingoes") #Add a constant to the non-diagonal dissimilarities such that all eigenvalues are non-negative in the underlying Principal Co-ordinates Analysis (see wcmdscale for details "lingoes" (or TRUE) uses the recommended method of Legendre & Anderson (1999: “method 1”) here we add: Constant added to distances: 6.679e-17 (you can see in the summary)
ord
plot(ord)
anova(ord)
anova(ord, permutations = h)
h <- with(env,
how(blocks = name, nperm = 999))
anova(ord, permutations = h)
anova(ord, by="axis")
anova(ord, by="terms")
RsquareAdj(ord)
# Perform PERMANOVA to test for differences in endophyte community composition as a function of host species and genus
permanova <- adonis2(microbio, permutations = 999)
# Perform PERMANOVA to test for differences in endophyte community composition as a function of host species and genus
permanova <- adonis2(microbio ~ 1, permutations = 999)
?RsquareAdj
RsquareAdj(ord, permutations = h)  #varpart uses RsquareAdj.
RsquareAdj(ord, permutations = 2)  #varpart uses RsquareAdj.
ord
# plot the RDA using ggplot (ggord package)
library(ggord)
install.packages("ggord")
# plot the RDA using ggplot (ggord package)
library(ggord)
# Enable the r-universe repo
options(repos = c(
fawda123 = 'https://fawda123.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# Install ggord
install.packages('ggord')
# Install ggord
#install.packages('ggord')
library(ggord) #simple package for creating ordination plots with ggplot2.
# plot the RDA using ggplot (ggord package)
ggord(ord)
# plot the RDA using ggplot (ggord package)
ggord(ord, env$name) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) # looking at the raw code, this is plotting the 'wa scores'
# plot the RDA using ggplot (ggord package)
ggord(ord, env$organ) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot the RDA using ggplot (ggord package)
ggord(ord, env$organ) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot the RDA using ggplot (ggord package), make sure you clean graph env't before
ggord(ord, env$name) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot the RDA using ggplot (ggord package), make sure you clean graph env't before
ggord(ord, env$Family) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot the RDA using ggplot (ggord package), make sure you clean graph env't before
ggord(ord, env$Genus) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot the RDA using ggplot (ggord package), make sure you clean graph env't before
ggord(ord, env$StomatalDensity) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ord2 <- capscale(microbio ~ RootShoot + RootLength_Total+ LA_Total+ Height + StemDiameter + NbLeaves + fvfm  + SRL + LSWC + LT + Condition(name), data = env, add = "lingoes")
ord
ord2
# perform dbRDA analysis
ord <- dbrda(microbio ~ RootShoot + RootLength_Total+ LA_Total+ Height + StemDiameter + NbLeaves + fvfm  + SRL + LSWC + LT + Condition(name), data = env, add = "lingoes", distance = "bray") #Add a constant to the non-diagonal dissimilarities such that all eigenvalues are non-negative in the underlying Principal Co-ordinates Analysis (see wcmdscale for details "lingoes" (or TRUE) uses the recommended method of Legendre & Anderson (1999: “method 1”) here we add: Constant added to distances: 6.679e-17 (you can see in the summary)
ord
# perform dbRDA analysis
ord <- dbrda(microbio ~ RootShoot + RootLength_Total+ LA_Total+ Height + StemDiameter + NbLeaves + fvfm  + SRL + LSWC + LT + Condition(name), data = env, add = "lingoes", metaMDS = TRUE) #Add a constant to the non-diagonal dissimilarities such that all eigenvalues are non-negative in the underlying Principal Co-ordinates Analysis (see wcmdscale for details "lingoes" (or TRUE) uses the recommended method of Legendre & Anderson (1999: “method 1”) here we add: Constant added to distances: 6.679e-17 (you can see in the summary)
# perform dbRDA analysis
ord <- dbrda(microbio ~ RootShoot + RootLength_Total+ LA_Total+ Height + StemDiameter + NbLeaves + fvfm  + SRL + LSWC + LT + Condition(name), data = env, add = "lingoes", metaMDS = TRUE) #Add a constant to the non-diagonal dissimilarities such that all eigenvalues are non-negative in the underlying Principal Co-ordinates Analysis (see wcmdscale for details "lingoes" (or TRUE) uses the recommended method of Legendre & Anderson (1999: “method 1”) here we add: Constant added to distances: 6.679e-17 (you can see in the summary)
# perform dbRDA analysis
ord <- dbrda(microbio ~ RootShoot + RootLength_Total+ LA_Total+ Height + StemDiameter + NbLeaves + fvfm  + SRL + LSWC + LT + Condition(name), data = env, add = "lingoes") #Add a constant to the non-diagonal dissimilarities such that all eigenvalues are non-negative in the underlying Principal Co-ordinates Analysis (see wcmdscale for details "lingoes" (or TRUE) uses the recommended method of Legendre & Anderson (1999: “method 1”) here we add: Constant added to distances: 6.679e-17 (you can see in the summary)
ord2 <- capscale(microbio ~ RootShoot + RootLength_Total+ LA_Total+ Height + StemDiameter + NbLeaves + fvfm  + SRL + LSWC + LT + Condition(name), data = env, add = "lingoes", metaMDS = TRUE)
0.9650/9.2712
0.9650/(9.2712-1.3360)
ord
plot(ord)
# plot the RDA using ggplot (ggord package), make sure you clean graph env't before
ggord(ord) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggord(ord, env$name) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot the RDA using ggplot (ggord package), make sure you clean graph env't before
ggord(ord) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ord
plot(ord)
# plot the RDA using ggplot (ggord package), make sure you clean graph env't before
ggord(ord) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
plot(ord, display = 'sites')
plot(ord, display = 'species')
rda <- rda(microbio ~ RootShoot + RootLength_Total+ LA_Total+ Height + StemDiameter + NbLeaves + fvfm  + SRL + LSWC + LT + Condition(name), data = env, add = "lingoes")
rda <- rda(vegan::decostand(leaf$reads, method = "hellinger") ~ RootShoot + RootLength_Total+ LA_Total+ Height + StemDiameter + NbLeaves + fvfm  + SRL + LSWC + LT + Condition(name), data = env, add = "lingoes")
rda
plot(rda)
anova(rda)
anova(ord, permutations = h) ## overall test of the significance of the analysis knwing that the permutations cannnot be done across different species
anova(ord, by="terms") ## test for sig. trait varaibles
anova(ord) ## overall test of the significance of the analysis
RsquareAdj(rda)
varpart(rda)
load("./results/Metabarlist_natura_clean_16S.Rdata")
set.seed(123456)
library(tidyverse)
library(labdsv)
library(dplyr)
library(FactoMineR)
library(car)
library(missMDA)
library(metabaR)
library(ggplot2)
library(corrplot)
library(factoextra)
library(MASS)
library(cowplot)
library(nlme)
library(MuMIn)
library(multcomp)
library(ggpubr)
library(ade4)
library(hillR)
library(adespatial)
library(reldist)
library(bipartite)
library(vegan)
library(scales)
library(phyloseq)
library(reshape2)
library(ggpubr)
library(BiocManager)
#BiocManager::install("microbiome")
library(microbiome)
# Enable the r-universe repo
options(repos = c(
fawda123 = 'https://fawda123.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# Install ggord
#install.packages('ggord')
library(ggord) #simple package for creating ordination plots with ggplot2. Marcus W. Beck (2017). ggord: Ordination Plots with ggplot2. R package version 1.0.0. https://zenodo.org/badge/latestdoi/35334615
setwd("E:/Sophie_pipeline/obitools")
load("./results/Metabarlist_natura_clean_16S.Rdata")
setwd("E:/Sophie_pipeline/obitools")
load("./resources/Metabarlist_natura_clean_16S.Rdata")
#get authorization
googlesheets4::gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets.readonly" )
traits <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/13NVmdKXHo6wZKErSje-4_Iv8C-6uHz_KuBTiUL6oifE/edit#gid=1174632153", sheet = "traits")
View(traits)
gmin <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/13NVmdKXHo6wZKErSje-4_Iv8C-6uHz_KuBTiUL6oifE/edit#gid=1174632153", sheet = "gmin")
View(gmin)
names(gmin)
gmin <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/13NVmdKXHo6wZKErSje-4_Iv8C-6uHz_KuBTiUL6oifE/edit#gid=1174632153", sheet = "gmin") %>% dplyr::select(Code, gmin)
traits <- traits %>% left_join(gmin, by = "Code")
traits$code <- as.character(traits$code)
natura_clean$samples <- left_join(natura_clean$samples, traits, by = "code")
natura_clean$samples <- left_join(natura_clean$samples, traits, by = "Code")
traits <- traits %>% rename(code = Code)
natura_clean$samples <- left_join(natura_clean$samples, traits, by = "code")
traits$code <- as.character(traits$code)
natura_clean$samples <- left_join(natura_clean$samples, traits, by = "code")
row.names(natura_clean$samples) <- natura_clean$samples$sample_id
#with traits
save(natura_clean, file = "./results/Metabarlist_natura_clean_16S_traits.Rdata")
load("./resources/Metabarlist_natura_clean_ITS2.Rdata")
#get authorization
googlesheets4::gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets.readonly" )
load("./resources/Metabarlist_natura_clean_ITS2.Rdata")
#get authorization
googlesheets4::gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets.readonly" )
traits <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/13NVmdKXHo6wZKErSje-4_Iv8C-6uHz_KuBTiUL6oifE/edit#gid=1174632153", sheet = "traits")
gmin <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/13NVmdKXHo6wZKErSje-4_Iv8C-6uHz_KuBTiUL6oifE/edit#gid=1174632153", sheet = "gmin") %>% dplyr::select(Code, gmin)
traits <- traits %>% left_join(gmin, by = "Code")
traits <- traits %>% rename(code = Code)
traits$code <- as.character(traits$code)
natura_clean$samples <- left_join(natura_clean$samples, traits, by = "code")
row.names(natura_clean$samples) <- natura_clean$samples$sample_id
#with traits
save(natura_clean, file = "./results/Metabarlist_natura_clean_ITS2_traits.Rdata")
#get authorization
googlesheets4::gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets.readonly" )
traits <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/13NVmdKXHo6wZKErSje-4_Iv8C-6uHz_KuBTiUL6oifE/edit#gid=1174632153", sheet = "traits")
#add gmin
gmin <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/13NVmdKXHo6wZKErSje-4_Iv8C-6uHz_KuBTiUL6oifE/edit#gid=1174632153", sheet = "gmin") %>% dplyr::select(Code, gmin)
traits <- traits %>% left_join(gmin, by = "Code")
traits <- traits %>% rename(code = Code)
traits$code <- as.character(traits$code)
#check the nas
pMiss <- function(x){sum(is.na(x))/length(x)*100}
apply(traits,2,pMiss)
aggr_plot <- aggr(traits, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(traits), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#we see that SD is almost 30% missing values, the rest is below a threshold of 5%
library(VIM)
aggr_plot <- aggr(traits, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(traits), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#imputing th emissing data for all traits
library(mice)
tempData <- mice(traits %>% dplyr::select(-MajVLA, -NbLeaflets, - TLP),m=5,maxit=50,meth='pmm',seed=500)
summary(tempData)
completedData <- complete(tempData,1)
A <- left_join(completedData, traits %>% dplyr::select(MajVLA, NbLeaflets,  TLP),  c("Code"))
A <- left_join(completedData, traits %>% dplyr::select(MajVLA, NbLeaflets,  TLP),  c("code"))
A <- left_join(completedData, traits %>% dplyr::select(MajVLA, NbLeaflets,  TLP),  by = "code")
names(completedData)
names(traits)
A <- left_join(completedData, traits %>% dplyr::select(code, MajVLA, NbLeaflets,  TLP),  by = "code")
write.csv(A, "./resources/DRYER_natura_imputed_traits.csv", col.names = FALSE, row.names = FALSE)
write.csv(A, "./resources/DRYER_natura_imputed_traits.csv")
write.csv(A, "./resources/DRYER_natura_imputed_traits.csv", col.names = FALSE, row.names = FALSE)
write.csv(A, "./resources/DRYER_natura_imputed_traits.csv", row.names = FALSE)
#inspecting data after imputation
densityplot(tempData)
tempData$imp$gmin
load("./resources/Metabarlist_natura_clean_16S.Rdata")
#microbio 16S clean
load("./resources/Metabarlist_natura_clean_16S.Rdata")
#traits imputed
traits <- read_csv("resources/DRYER_natura_imputed_traits.csv")
