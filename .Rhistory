Shannon_fungi_natura_clean <-hill_taxa(natura_clean$reads,q=1) #equivalent of Shannon entropy
df <- Shannon_fungi_natura_clean %>%
enframe() %>%
rename(Shannon = value,
sample_id = name)
natura_clean$samples <- left_join(natura_clean$samples, df)
#save data with alpha diversity measures
row.names(natura_clean$samples) <- natura_clean$samples$sample_id
#with traits & indices
save(natura_clean, file = "./resources/Metabarlist_natura_clean_16S_traits_alpha.Rdata")
load("./resources/Metabarlist_natura_clean_16S_traits_alpha.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
traits_norm$code <- as.character(traits_norm$code)
#traits normalized
traits_norm <- read_csv("resources/DRYER_natura_imputed_traits_norm.csv")
traits_norm$code <- as.character(traits_norm$code)
traits <- left_join(leaf$samples %>% dplyr::select(code, Shannon), traits_norm)
#test normality shannon
ggqqplot(traits$Shannon)
ggdensity(traits$Shannon)
shapiro.test(traits$Shannon) # non normal p-value<0.0001
#transform Shannon to meet normality
bc<-boxcox(traits$Shannon~1)
#traits
names(traits)
env <- traits[,c(2,7,40:45,33:36)] #only leaf traits
# Prior to constructing the model, root functional trait variables were mean-centered and scaled to unit variance.
names(env)
env.scale <- scale(env[,-c(1,2)], center = TRUE, scale = TRUE) #scale traits not the indices
env.scale <-as.data.frame(env.scale)
rest <- env[,c(1,2)]
env.scale <- cbind(env.scale, rest)
#check collinearity with VIF on lm (<5)
names(env.scale)
lm.leaf.ITS <-lm(norm_Shannon~ norm_LSWC + norm_StomatalDensity +norm_LT +norm_gmin + norm_SLA + norm_TotalLeafArea+Name+ MEM1 + MEM2+MEM3+MEM4, env.scale)
lm.leaf.ITS <-lm(Shannon~ norm_LSWC + norm_StomatalDensity +norm_LT +norm_gmin + norm_SLA + norm_TotalLeafArea+Name+ MEM1 + MEM2+MEM3+MEM4, env.scale)
summary(lm.leaf.ITS)
vif(lm.leaf.ITS) #nothing to remove all <5
lm.leaf.ITS.step<-stepAIC(lm.leaf.ITS,direction="both")
vif(lm.leaf.ITS.step) # <10
summary(lm.leaf.ITS.step)
RsquareAdj(lm.leaf.ITS.step)
#
# $r.squared
# [1] 0.4999709
#
# $adj.r.squared
# [1] 0.4354511
library(jtools)
table <- data.frame(summ(lm.leaf.ITS.step)$coeftable)
lm.leaf.16S <-lm(Shannon~ norm_LSWC + norm_StomatalDensity +norm_LT +norm_gmin + norm_SLA + norm_TotalLeafArea+Name+ MEM1 + MEM2+MEM3+MEM4, env.scale)
summary(lm.leaf.16S)
vif(lm.leaf.16S) #nothing to remove all <5
lm.leaf.16S.step<-stepAIC(lm.leaf.16S,direction="both")
vif(lm.leaf.16S.step) # <10
summary(lm.leaf.16S.step)
RsquareAdj(lm.leaf.16S.step)
#
# $r.squared
# [1] 0.4999709
#
# $adj.r.squared
# [1] 0.4354511
library(jtools)
table <- data.frame(summ(lm.leaf.16S.step)$coeftable)
write.csv(table, "Shannon_leaf_bacteria.csv")
table
load("./resources/Metabarlist_natura_clean_16S_traits_alpha.Rdata")
root <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "root")
#traits normalized
traits_norm <- read_csv("resources/DRYER_natura_imputed_traits_norm.csv")
traits_norm$code <- as.character(traits_norm$code)
traits <- left_join(root$samples %>% dplyr::select(code, Shannon), traits_norm)
#test normality shannon
ggqqplot(traits$Shannon)
ggdensity(traits$Shannon)
shapiro.test(traits$Shannon) # non normal p-value<0.0001
#traits
names(traits)
env <- traits[,c(7,2, 46:48,33:36)] #only root traits
# Prior to constructing the model, root functional trait variables were mean-centered and scaled to unit variance.
names(env)
env.scale <- scale(env[,-c(1,9)], center = TRUE, scale = TRUE) #scale traits not the indices
env.scale <-as.data.frame(env.scale)
#traits
names(traits)
env <- traits[,c(7,2, 46:48,33:36)] #only root traits
# Prior to constructing the model, root functional trait variables were mean-centered and scaled to unit variance.
names(env)
env.scale <- scale(env[,-c(1,2)], center = TRUE, scale = TRUE) #scale traits not the indices
env.scale <-as.data.frame(env.scale)
rest <- env[,c(1,2)]
env.scale <- cbind(env.scale, rest)
#check collinearity with VIF on lm (<5)
names(env.scale)
lm.root.ITS <-lm(Shannon~ norm_RootTissueDensity +  norm_SRL + norm_RootDiameter + MEM1+MEM2+MEM3+MEM4, env.scale)
summary(lm.root.ITS)
vif(lm.root.ITS) #nothing to remove all <5
lm.root.16S <-lm(Shannon~ norm_RootTissueDensity +  norm_SRL + norm_RootDiameter + MEM1+MEM2+MEM3+MEM4, env.scale)
summary(lm.root.16S)
vif(lm.root.16S) #nothing to remove all <5
lm.root.16S.step<-stepAIC(lm.root.16S,direction="both")
vif(lm.root.16S.step) # <5
sum.root.16S <- summary(lm.root.16S.step)
plot(lm.root.16S.step)
#table
d<- summ(lm.root.16S.step)
RsquareAdj(lm.root.16S.step)
table <- data.frame(summ(lm.root.16S.step)$coeftable)
write.csv(table, "Shannon_root_bacteria.csv")
RsquareAdj(lm.leaf.16S.step)
load("./resources/Metabarlist_natura_clean_16S_traits_alpha.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
#traits normalized
traits_norm <- read_csv("resources/DRYER_natura_imputed_traits_norm.csv")
traits_norm$code <- as.character(traits_norm$code)
traits <- left_join(leaf$samples %>% dplyr::select(code, Shannon), traits_norm)
#test normality shannon
ggqqplot(traits$Shannon)
ggdensity(traits$Shannon)
shapiro.test(traits$Shannon) # normal
#traits
names(traits)
env <- traits[,c(2,7,40:45,33:36)] #only leaf traits
# Prior to constructing the model, root functional trait variables were mean-centered and scaled to unit variance.
names(env)
env.scale <- scale(env[,-c(1,2)], center = TRUE, scale = TRUE) #scale traits not the indices
env.scale <-as.data.frame(env.scale)
rest <- env[,c(1,2)]
env.scale <- cbind(env.scale, rest)
#check collinearity with VIF on lm (<5)
names(env.scale)
lm.leaf.16S <-lm(Shannon~ norm_LSWC + norm_StomatalDensity +norm_LT +norm_gmin + norm_SLA + norm_TotalLeafArea+Name+ MEM1 + MEM2+MEM3+MEM4, env.scale)
summary(lm.leaf.16S)
vif(lm.leaf.16S) #nothing to remove all <5
lm.leaf.16S.step<-stepAIC(lm.leaf.16S,direction="both")
vif(lm.leaf.16S.step) # <10
summary(lm.leaf.16S.step)
#table
# library(jtools)
# c<- summ(lm.leaf.16S.step)
RsquareAdj(lm.leaf.16S.step)
#
# $r.squared
# [1] 0.4999709
#
# $adj.r.squared
# [1] 0.4354511
library(jtools)
table <- data.frame(summ(lm.leaf.16S.step)$coeftable)
write.csv(table, "Shannon_leaf_bacteria.csv")
load("./resources/Metabarlist_natura_clean_16S_traits_alpha.Rdata")
root <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "root")
#traits normalized
traits_norm <- read_csv("resources/DRYER_natura_imputed_traits_norm.csv")
traits_norm$code <- as.character(traits_norm$code)
traits <- left_join(root$samples %>% dplyr::select(code, Shannon), traits_norm)
#test normality shannon
ggqqplot(traits$Shannon)
ggdensity(traits$Shannon)
shapiro.test(traits$Shannon) # normal pvalue>0.05
#traits
names(traits)
env <- traits[,c(7,2, 46:48,33:36)] #only root traits
# Prior to constructing the model, root functional trait variables were mean-centered and scaled to unit variance.
names(env)
env.scale <- scale(env[,-c(1,2)], center = TRUE, scale = TRUE) #scale traits not the indices
env.scale <-as.data.frame(env.scale)
rest <- env[,c(1,2)]
env.scale <- cbind(env.scale, rest)
#check collinearity with VIF on lm (<5)
names(env.scale)
lm.root.16S <-lm(Shannon~ norm_RootTissueDensity +  norm_SRL + norm_RootDiameter + MEM1+MEM2+MEM3+MEM4, env.scale)
summary(lm.root.16S)
vif(lm.root.16S) #nothing to remove all <5
lm.root.16S.step<-stepAIC(lm.root.16S,direction="both")
vif(lm.root.16S.step) # <5
sum.root.16S <- summary(lm.root.16S.step)
plot(lm.root.16S.step)
#table
d<- summ(lm.root.16S.step)
RsquareAdj(lm.root.16S.step)
# $r.squared
# [1] 0.1138476
#
# $adj.r.squared
# [1] 0.0816239
table <- data.frame(summ(lm.root.16S.step)$coeftable)
write.csv(table, "Shannon_root_bacteria.csv")
load("./results/Metabarlist_natura_clean_ITS2.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
# Aggregate the metabarlist at the class level
leaf_Genus <-  aggregate_motus(leaf, groups= leaf$motus$Genus)
# Aggregate per organ/genus
tmp <-  melt(aggregate(leaf_Genus$reads, by = list(
paste(leaf_Genus$samples$Species)), sum))
colnames(tmp) <- c("Species", "Genus", "Value")
# Calculate the total abundance per Class
Genus_abundance <- aggregate(Value ~ Genus, data = tmp, sum)
options(scipen = 999)
total_sum <- sum(Genus_abundance$Value)
Genus_proportions <- Genus_abundance %>% mutate(Proportion = Value / total_sum *100)
Genus_proportions
View(Genus_proportions)
## root
root <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "root")
# Aggregate the metabarlist at the class level
root_Genus <-  aggregate_motus(root, groups= root$motus$Genus)
# Aggregate per organ/genus
tmp <-  melt(aggregate(root_Genus$reads, by = list(
paste(root_Genus$samples$Species)), sum))
colnames(tmp) <- c("Species", "Genus", "Value")
# Calculate the total abundance per Class
Genus_abundance <- aggregate(Value ~ Genus, data = tmp, sum)
options(scipen = 999)
total_sum <- sum(Genus_abundance$Value)
Genus_proportions <- Genus_abundance %>% mutate(Proportion = Value / total_sum *100)
Genus_proportions
View(Genus_proportions)
#Package n√©cessaire
# install bioconductor dependencies
#install.packages("BiocManager")
#BiocManager::install("biomformat")
# install metabaR package
#install.packages("remotes")
#remotes::install_github("metabaRfactory/metabaR")
library(ape) #read fasta files
library(ggplot2)
library(ggpubr)
library(reshape2)
library(metabaR)
library(readr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(stringr)
library(kableExtra)
load("./results/Metabarlist_natura_clean_16S.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
leaf$motus$Genus <- paste0("g__",leaf$motus$Genus)
# Aggregate the metabarlist at the class level
#leaf_Genus <-  aggregate_motus(leaf, groups= leaf$motus$Phylum_Class_Genus)
leaf_Genus <-  aggregate_motus(leaf, groups= leaf$motus$Genus)
leaf_Genus$samples$Species <- str_sub(leaf_Genus$samples$Species,1,-2)
leaf_Genus$samples$Name <- paste0(substr(leaf_Genus$samples$Genus, 1, 1), ".", " ", leaf_Genus$samples$Species)
# Aggregate per organ/genus
tmp <-  melt(aggregate(leaf_Genus$reads, by = list(
paste(leaf_Genus$samples$Name)), sum))
colnames(tmp) <- c("Name", "Genus", "Value")
# Calculate the total abundance per Class
Genus_abundance <- aggregate(Value ~ Genus, data = tmp, sum)
options(scipen = 999)
total_sum <- sum(Genus_abundance$Value)
Genus_proportions <- Genus_abundance %>% mutate(Proportion = Value / total_sum *100)
View(Genus_proportions)
load("./resources/Metabarlist_natura_clean_ITS2_traits_alpha.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
set.seed(123456)
library(tidyverse)
library(labdsv)
library(dplyr)
library(FactoMineR)
library(car)
library(missMDA)
library(metabaR)
library(ggplot2)
library(corrplot)
library(factoextra)
library(MASS)
library(cowplot)
library(MuMIn)
library(multcomp)
library(ggpubr)
library(ade4)
library(hillR)
library(adespatial)
library(reldist)
library(bipartite)
library(vegan)
library(scales)
library(phyloseq)
library(reshape2)
library(ggpubr)
library(purrr)
library(stringr)
library(BiocManager)
#BiocManager::install("microbiome")
library(microbiome)
# Enable the r-universe repo
# options(repos = c(
#     fawda123 = 'https://fawda123.r-universe.dev',
#     CRAN = 'https://cloud.r-project.org'))
# Install ggord
#install.packages('ggord')
library(ggord) #simple package for creating ordination plots with ggplot2. Marcus W. Beck (2017). ggord: Ordination Plots with ggplot2. R package version 1.0.0. https://zenodo.org/badge/latestdoi/35334615
setwd("E:/Sophie_pipeline/obitools")
load("./resources/Metabarlist_natura_clean_ITS2_traits_alpha.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
load("./results/null/bray_abund_null_dev_fun.RData")
boxplot(bray_abund_null_dev_fun,outline=FALSE)
df_bray_fun_endo<-data.frame(bray_abund_null_dev_fun)
colnames(df_bray_fun_endo)<-c("NDV")
View(df_bray_fun_endo)
# load("./results/null/bray_abund_null_dev_16S_leaf_nontranspose.RData") #leaf
# load("./results/null/bray_abund_null_dev_16S_root_nontranspose.RData") #root
load("./results/null/bray_abund_null_dev_16S_leaf_nontranspose_hel.RData") #leaf
load("./results/null/bray_abund_null_dev_16S_root_nontranspose_hel.RData") #root
boxplot(bray_abund_null_dev_fun, bray_abund_null_dev_fun_root,outline=FALSE)
t.test(bray_abund_null_dev_fun,bray_abund_null_dev_fun_root, alternative = "two.sided", var.equal = FALSE)
a<- as.data.frame(bray_abund_null_dev_fun)
View(a)
library(tidyverse)
library(labdsv)
library(dplyr)
library(FactoMineR)
library(car)
library(missMDA)
library(metabaR)
library(ggplot2)
library(corrplot)
library(factoextra)
library(MASS)
library(cowplot)
library(nlme)
library(MuMIn)
library(multcomp)
library(ggpubr)
library(ade4)
library(hillR)
library(adespatial)
library(reldist)
library(bipartite)
library(vegan)
library(scales)
library(phyloseq)
library(reshape2)
library(ggpubr)
library(BiocManager)
library(microbiome)
# load("./results/null/bray_abund_null_dev_16S_leaf_nontranspose.RData") #leaf
# load("./results/null/bray_abund_null_dev_16S_root_nontranspose.RData") #root
load("./results/null/bray_abund_null_dev_16S_leaf_nontranspose_hel.RData") #leaf
load("./results/null/bray_abund_null_dev_16S_root_nontranspose_hel.RData") #root
a<- as.data.frame(bray_abund_null_dev_fun)
a$id <- rownames(a)
View(a)
esquisse:::esquisser()
load("./resources/Metabarlist_natura_clean_ITS2_traits_alpha.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
b<- left_join(a, leaf$samples$sample_id)
rlang::last_error()
a$sample_id <- rownames(a)
b<- left_join(a, leaf$samples$sample_id)
View(a)
setdiff(a$sample_id, leaf$samples$sample_id)
a$sample_id2 <- rownames(leaf$samples)
load("./resources/Metabarlist_natura_clean_ITS2_traits_alpha.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
#ITS
# load("./results/null/bray_abund_null_dev_ITS_leaf_nontranspose.RData") #leaf
# load("./results/null/bray_abund_null_dev_ITS_root_nontranspose.RData") #root
load("./results/null/bray_abund_null_dev_ITS_leaf_nontranspose_hel.RData") #leaf
a<- as.data.frame(bray_abund_null_dev_fun)
a$sample_id <- rownames(a)
b<- left_join(a, leaf$samples$sample_id)
a$sample_id2 <- rownames(leaf$reads)
b<- leaf$samples %>% dplyr::select(Name, MajVLA, TLP,Shannon,LSWC,StomatalDensity)
c<- left_join(a, b)
c<- left_join(a, b, by ="sample_id")
View(a)
View(b)
b$sample_id <- rownames(b)
c<- left_join(a, b, by ="sample_id")
View(b)
View(c)
esquisse:::esquisser()
library(ggplot2)
library(reshape2)
library(metabaR)
library(readr)
library(dplyr)
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
set.seed(123456)
library(tidyverse)
library(labdsv)
library(dplyr)
library(FactoMineR)
library(car)
library(missMDA)
library(metabaR)
library(ggplot2)
library(corrplot)
library(factoextra)
library(MASS)
library(cowplot)
library(MuMIn)
library(multcomp)
library(ggpubr)
library(ade4)
library(hillR)
library(adespatial)
library(reldist)
library(bipartite)
library(vegan)
library(scales)
library(phyloseq)
library(reshape2)
library(ggpubr)
library(purrr)
library(stringr)
library(BiocManager)
#BiocManager::install("microbiome")
library(microbiome)
# Enable the r-universe repo
# options(repos = c(
#     fawda123 = 'https://fawda123.r-universe.dev',
#     CRAN = 'https://cloud.r-project.org'))
# Install ggord
#install.packages('ggord')
library(ggord) #simple package for creating ordination plots with ggplot2. Marcus W. Beck (2017). ggord: Ordination Plots with ggplot2. R package version 1.0.0. https://zenodo.org/badge/latestdoi/35334615
setwd("E:/Sophie_pipeline/obitools")
load("E:/Sophie_pipeline/obitools/resources/Metabarlist_natura_clean_ITS2_traits.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
root <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "root")
#leaf fungi
natura.raref.fungi = hill_rarefaction(leaf, nboot = 20, nsteps = 10)
head(natura.raref.fungi$hill_table)
gghill_rarefaction(natura.raref.fungi)
material <- leaf$samples$Genus[match(leaf$pcrs$sample_id,                                rownames(leaf$samples))] # Define a vector containing the Material info for each pcrs
material <- setNames(material,rownames(leaf$pcrs))# Use of gghill_rarefaction requires a vector with named pcrs
p <- gghill_rarefaction(natura.raref.fungi, group=material)
rarefaction_leaf_fungi <- p + ggtitle("A. Rarefaction curves - Leaf fungi")
#root fungi
natura.raref.fungi = hill_rarefaction(root, nboot = 20, nsteps = 10)
head(natura.raref.fungi$hill_table)
gghill_rarefaction(natura.raref.fungi)
material <- root$samples$Genus[match(root$pcrs$sample_id,                                rownames(root$samples))] # Define a vector containing the Material info for each pcrs
material <- setNames(material,rownames(root$pcrs))# Use of gghill_rarefaction requires a vector with named pcrs
p <- gghill_rarefaction(natura.raref.fungi, group=material)
rarefaction_root_fungi <- p + ggtitle("B. Rarefaction curves - Root fungi")
rarefaction <- ggarrange(rarefaction_leaf_fungi, rarefaction_root_fungi)
rarefaction
load("./resources/Metabarlist_natura_clean_16S_traits.Rdata")
leaf <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "leaf")
root <- subset_metabarlist(natura_clean, table = "samples",
indices = natura_clean$samples$organ == "root")
#leaf bacteria
natura.raref.bacteria = hill_rarefaction(leaf, nboot = 20, nsteps = 10)
head(natura.raref.bacteria$hill_table)
gghill_rarefaction(natura.raref.bacteria)
material <- leaf$samples$Genus[match(leaf$pcrs$sample_id,                                rownames(leaf$samples))] # Define a vector containing the Material info for each pcrs
material <- setNames(material,rownames(leaf$pcrs))# Use of gghill_rarefaction requires a vector with named pcrs
p <- gghill_rarefaction(natura.raref.bacteria, group=material)
rarefaction_leaf_bacteria <- p + ggtitle("C. Rarefaction curves - Leaf bacteria")
#root bacteria
natura.raref.bacteria = hill_rarefaction(root, nboot = 20, nsteps = 10)
head(natura.raref.bacteria$hill_table)
gghill_rarefaction(natura.raref.bacteria)
material <- root$samples$Genus[match(root$pcrs$sample_id,                                rownames(root$samples))] # Define a vector containing the Material info for each pcrs
material <- setNames(material,rownames(root$pcrs))# Use of gghill_rarefaction requires a vector with named pcrs
p <- gghill_rarefaction(natura.raref.bacteria, group=material)
rarefaction_root_bacteria <- p + ggtitle("D. Rarefaction curves - Root bacteria")
rarefaction <- ggarrange(rarefaction_leaf_fungi, rarefaction_root_fungi, rarefaction_leaf_bacteria, rarefaction_root_bacteria, nrow = 2, ncol = 2)
rarefaction
ggsave(filename = "Rarefaction_curves.png", plot = rarefaction, bg = "white", width = 8, height = 15, dpi = 600)
ggsave(filename = "Rarefaction_curves.png", plot = rarefaction, bg = "white", width = 15, height = 12, dpi = 600)
rarefaction <- ggarrange(rarefaction_leaf_fungi, rarefaction_root_fungi, rarefaction_leaf_bacteria, rarefaction_root_bacteria, nrow = 2, ncol = 2, common.legend = TRUE)
rarefaction
rarefaction <- ggarrange(rarefaction_leaf_fungi, rarefaction_root_fungi, rarefaction_leaf_bacteria, rarefaction_root_bacteria, nrow = 2, ncol = 2, common.legend = TRUE, legend = "bottom")
rarefaction
ggsave(filename = "Rarefaction_curves.png", plot = rarefaction, bg = "white", width = 15, height = 12, dpi = 600)
ggsave(filename = "Rarefaction_curves.png", plot = rarefaction, bg = "white", width = 12, height = 12, dpi = 600)
ggsave(filename = "Rarefaction_curves.png", plot = rarefaction, bg = "white", width = 12, height = 10, dpi = 600)
rarefaction_root_bacteria
rarefaction_root_bacteria <- p + ggtitle("D. Rarefaction curves - Root bacteria") +
theme(legend.text = element_text(size = 15))
rarefaction_root_bacteria
rarefaction_root_bacteria <- p + ggtitle("D. Rarefaction curves - Root bacteria") +
theme(legend.text = element_text(size = 15), legend.title = "Host genus")
rarefaction_root_bacteria
rarefaction_root_bacteria <- p + ggtitle("D. Rarefaction curves - Root bacteria") +
theme(legend.text = element_text(size = 15, face = "italic"))+
labs(fill = "Host genus")
rarefaction_root_bacteria
rarefaction_root_bacteria <- p + ggtitle("D. Rarefaction curves - Root bacteria") +
theme(legend.text = element_text(size = 15, face = "italic"), legend.title = element_blank())
rarefaction_root_bacteria
rarefaction_leaf_bacteria <- p + ggtitle("C. Rarefaction curves - Leaf bacteria")+
theme(legend.text = element_text(size = 15, face = "italic"), legend.title = element_blank())
rarefaction_root_fungi <- p + ggtitle("B. Rarefaction curves - Root fungi")+
theme(legend.text = element_text(size = 15, face = "italic"), legend.title = element_blank())
rarefaction_leaf_fungi <- p + ggtitle("A. Rarefaction curves - Leaf fungi")+
theme(legend.text = element_text(size = 15, face = "italic"), legend.title = element_blank())
rarefaction <- ggarrange(rarefaction_leaf_fungi, rarefaction_root_fungi, rarefaction_leaf_bacteria, rarefaction_root_bacteria, nrow = 2, ncol = 2, common.legend = TRUE, legend = "bottom")
rarefaction
ggsave(filename = "Rarefaction_curves.png", plot = rarefaction, bg = "white", width = 12, height = 10, dpi = 600)
